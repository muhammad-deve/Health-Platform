// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: analytics.proto

package analytics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnalyticsService_AddMedicalRecord_FullMethodName              = "/analytics.AnalyticsService/AddMedicalRecord"
	AnalyticsService_GetMedicalRecord_FullMethodName              = "/analytics.AnalyticsService/GetMedicalRecord"
	AnalyticsService_GetMedicalRecordsById_FullMethodName         = "/analytics.AnalyticsService/GetMedicalRecordsById"
	AnalyticsService_UpdateMedicalRecord_FullMethodName           = "/analytics.AnalyticsService/UpdateMedicalRecord"
	AnalyticsService_DeleteMedicalRecord_FullMethodName           = "/analytics.AnalyticsService/DeleteMedicalRecord"
	AnalyticsService_ListMedicalRecords_FullMethodName            = "/analytics.AnalyticsService/ListMedicalRecords"
	AnalyticsService_AddLifestyleData_FullMethodName              = "/analytics.AnalyticsService/AddLifestyleData"
	AnalyticsService_GetLifestyleData_FullMethodName              = "/analytics.AnalyticsService/GetLifestyleData"
	AnalyticsService_GetLifestyleDataById_FullMethodName          = "/analytics.AnalyticsService/GetLifestyleDataById"
	AnalyticsService_UpdateLifestyleData_FullMethodName           = "/analytics.AnalyticsService/UpdateLifestyleData"
	AnalyticsService_DeleteLifestyleData_FullMethodName           = "/analytics.AnalyticsService/DeleteLifestyleData"
	AnalyticsService_AddWearableData_FullMethodName               = "/analytics.AnalyticsService/AddWearableData"
	AnalyticsService_GetWearableData_FullMethodName               = "/analytics.AnalyticsService/GetWearableData"
	AnalyticsService_GetWearableDataById_FullMethodName           = "/analytics.AnalyticsService/GetWearableDataById"
	AnalyticsService_UpdateWearableData_FullMethodName            = "/analytics.AnalyticsService/UpdateWearableData"
	AnalyticsService_DeleteWearableData_FullMethodName            = "/analytics.AnalyticsService/DeleteWearableData"
	AnalyticsService_GenerateHealthRecommendations_FullMethodName = "/analytics.AnalyticsService/GenerateHealthRecommendations"
	AnalyticsService_GetHealthRecommendationsById_FullMethodName  = "/analytics.AnalyticsService/GetHealthRecommendationsById"
	AnalyticsService_GetRealtimeHealthMonitoring_FullMethodName   = "/analytics.AnalyticsService/GetRealtimeHealthMonitoring"
	AnalyticsService_GetDailyHealthSummary_FullMethodName         = "/analytics.AnalyticsService/GetDailyHealthSummary"
	AnalyticsService_GetWeeklyHealthSummary_FullMethodName        = "/analytics.AnalyticsService/GetWeeklyHealthSummary"
)

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsServiceClient interface {
	// Medical records
	AddMedicalRecord(ctx context.Context, in *AddMedicalRecordReq, opts ...grpc.CallOption) (*AddMedicalRecordRes, error)
	GetMedicalRecord(ctx context.Context, in *GetMedicalRecordsReq, opts ...grpc.CallOption) (*GetMedicalRecordsRes, error)
	GetMedicalRecordsById(ctx context.Context, in *GetMedicalRecordsByIdReq, opts ...grpc.CallOption) (*GetMedicalRecordsByIdRes, error)
	UpdateMedicalRecord(ctx context.Context, in *UpdateMedicalRecordReq, opts ...grpc.CallOption) (*Empty, error)
	DeleteMedicalRecord(ctx context.Context, in *DeleteMedicalRecordReq, opts ...grpc.CallOption) (*Empty, error)
	ListMedicalRecords(ctx context.Context, in *ListMedicalRecordsReq, opts ...grpc.CallOption) (*ListMedicalRecordsRes, error)
	// Lifestyle data
	AddLifestyleData(ctx context.Context, in *AddLifestyleDataReq, opts ...grpc.CallOption) (*AddLifestyleDataRes, error)
	GetLifestyleData(ctx context.Context, in *GetLifestyleDataReq, opts ...grpc.CallOption) (*GetLifestyleDataRes, error)
	GetLifestyleDataById(ctx context.Context, in *GetLifestyleDataByIdReq, opts ...grpc.CallOption) (*GetLifestyleDataByIdRes, error)
	UpdateLifestyleData(ctx context.Context, in *UpdateLifestyleDataReq, opts ...grpc.CallOption) (*Empty, error)
	DeleteLifestyleData(ctx context.Context, in *DeleteLifestyleDataReq, opts ...grpc.CallOption) (*Empty, error)
	// Wearable Data
	AddWearableData(ctx context.Context, in *AddWearableDataReq, opts ...grpc.CallOption) (*AddWearableDataRes, error)
	GetWearableData(ctx context.Context, in *GetWearableDataReq, opts ...grpc.CallOption) (*GetWearableDataRes, error)
	GetWearableDataById(ctx context.Context, in *GetWearableDataByIdReq, opts ...grpc.CallOption) (*GetWearableDataByIdRes, error)
	UpdateWearableData(ctx context.Context, in *UpdateWearableDataReq, opts ...grpc.CallOption) (*Empty, error)
	DeleteWearableData(ctx context.Context, in *DeleteWearableDataReq, opts ...grpc.CallOption) (*Empty, error)
	// Health recommendations
	GenerateHealthRecommendations(ctx context.Context, in *GenerateHealthRecommendationsReq, opts ...grpc.CallOption) (*GenerateHealthRecommendationsRes, error)
	GetHealthRecommendationsById(ctx context.Context, in *GetHealthRecommendationsByIdReq, opts ...grpc.CallOption) (*GetHealthRecommendationsByIdRes, error)
	// Health monitoring
	GetRealtimeHealthMonitoring(ctx context.Context, in *GetRealtimeHealthMonitoringReq, opts ...grpc.CallOption) (*GetRealtimeHealthMonitoringRes, error)
	GetDailyHealthSummary(ctx context.Context, in *GetDailyHealthSummaryReq, opts ...grpc.CallOption) (*GetDailyHealthSummaryRes, error)
	GetWeeklyHealthSummary(ctx context.Context, in *GetWeeklyHealthSummaryReq, opts ...grpc.CallOption) (*GetWeeklyHealthSummaryRes, error)
}

type analyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsServiceClient(cc grpc.ClientConnInterface) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

func (c *analyticsServiceClient) AddMedicalRecord(ctx context.Context, in *AddMedicalRecordReq, opts ...grpc.CallOption) (*AddMedicalRecordRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMedicalRecordRes)
	err := c.cc.Invoke(ctx, AnalyticsService_AddMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetMedicalRecord(ctx context.Context, in *GetMedicalRecordsReq, opts ...grpc.CallOption) (*GetMedicalRecordsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMedicalRecordsRes)
	err := c.cc.Invoke(ctx, AnalyticsService_GetMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetMedicalRecordsById(ctx context.Context, in *GetMedicalRecordsByIdReq, opts ...grpc.CallOption) (*GetMedicalRecordsByIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMedicalRecordsByIdRes)
	err := c.cc.Invoke(ctx, AnalyticsService_GetMedicalRecordsById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) UpdateMedicalRecord(ctx context.Context, in *UpdateMedicalRecordReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AnalyticsService_UpdateMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) DeleteMedicalRecord(ctx context.Context, in *DeleteMedicalRecordReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AnalyticsService_DeleteMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) ListMedicalRecords(ctx context.Context, in *ListMedicalRecordsReq, opts ...grpc.CallOption) (*ListMedicalRecordsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMedicalRecordsRes)
	err := c.cc.Invoke(ctx, AnalyticsService_ListMedicalRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) AddLifestyleData(ctx context.Context, in *AddLifestyleDataReq, opts ...grpc.CallOption) (*AddLifestyleDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddLifestyleDataRes)
	err := c.cc.Invoke(ctx, AnalyticsService_AddLifestyleData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetLifestyleData(ctx context.Context, in *GetLifestyleDataReq, opts ...grpc.CallOption) (*GetLifestyleDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLifestyleDataRes)
	err := c.cc.Invoke(ctx, AnalyticsService_GetLifestyleData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetLifestyleDataById(ctx context.Context, in *GetLifestyleDataByIdReq, opts ...grpc.CallOption) (*GetLifestyleDataByIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLifestyleDataByIdRes)
	err := c.cc.Invoke(ctx, AnalyticsService_GetLifestyleDataById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) UpdateLifestyleData(ctx context.Context, in *UpdateLifestyleDataReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AnalyticsService_UpdateLifestyleData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) DeleteLifestyleData(ctx context.Context, in *DeleteLifestyleDataReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AnalyticsService_DeleteLifestyleData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) AddWearableData(ctx context.Context, in *AddWearableDataReq, opts ...grpc.CallOption) (*AddWearableDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddWearableDataRes)
	err := c.cc.Invoke(ctx, AnalyticsService_AddWearableData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetWearableData(ctx context.Context, in *GetWearableDataReq, opts ...grpc.CallOption) (*GetWearableDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWearableDataRes)
	err := c.cc.Invoke(ctx, AnalyticsService_GetWearableData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetWearableDataById(ctx context.Context, in *GetWearableDataByIdReq, opts ...grpc.CallOption) (*GetWearableDataByIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWearableDataByIdRes)
	err := c.cc.Invoke(ctx, AnalyticsService_GetWearableDataById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) UpdateWearableData(ctx context.Context, in *UpdateWearableDataReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AnalyticsService_UpdateWearableData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) DeleteWearableData(ctx context.Context, in *DeleteWearableDataReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AnalyticsService_DeleteWearableData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GenerateHealthRecommendations(ctx context.Context, in *GenerateHealthRecommendationsReq, opts ...grpc.CallOption) (*GenerateHealthRecommendationsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateHealthRecommendationsRes)
	err := c.cc.Invoke(ctx, AnalyticsService_GenerateHealthRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetHealthRecommendationsById(ctx context.Context, in *GetHealthRecommendationsByIdReq, opts ...grpc.CallOption) (*GetHealthRecommendationsByIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHealthRecommendationsByIdRes)
	err := c.cc.Invoke(ctx, AnalyticsService_GetHealthRecommendationsById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetRealtimeHealthMonitoring(ctx context.Context, in *GetRealtimeHealthMonitoringReq, opts ...grpc.CallOption) (*GetRealtimeHealthMonitoringRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRealtimeHealthMonitoringRes)
	err := c.cc.Invoke(ctx, AnalyticsService_GetRealtimeHealthMonitoring_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetDailyHealthSummary(ctx context.Context, in *GetDailyHealthSummaryReq, opts ...grpc.CallOption) (*GetDailyHealthSummaryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDailyHealthSummaryRes)
	err := c.cc.Invoke(ctx, AnalyticsService_GetDailyHealthSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetWeeklyHealthSummary(ctx context.Context, in *GetWeeklyHealthSummaryReq, opts ...grpc.CallOption) (*GetWeeklyHealthSummaryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWeeklyHealthSummaryRes)
	err := c.cc.Invoke(ctx, AnalyticsService_GetWeeklyHealthSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
// All implementations must embed UnimplementedAnalyticsServiceServer
// for forward compatibility.
type AnalyticsServiceServer interface {
	// Medical records
	AddMedicalRecord(context.Context, *AddMedicalRecordReq) (*AddMedicalRecordRes, error)
	GetMedicalRecord(context.Context, *GetMedicalRecordsReq) (*GetMedicalRecordsRes, error)
	GetMedicalRecordsById(context.Context, *GetMedicalRecordsByIdReq) (*GetMedicalRecordsByIdRes, error)
	UpdateMedicalRecord(context.Context, *UpdateMedicalRecordReq) (*Empty, error)
	DeleteMedicalRecord(context.Context, *DeleteMedicalRecordReq) (*Empty, error)
	ListMedicalRecords(context.Context, *ListMedicalRecordsReq) (*ListMedicalRecordsRes, error)
	// Lifestyle data
	AddLifestyleData(context.Context, *AddLifestyleDataReq) (*AddLifestyleDataRes, error)
	GetLifestyleData(context.Context, *GetLifestyleDataReq) (*GetLifestyleDataRes, error)
	GetLifestyleDataById(context.Context, *GetLifestyleDataByIdReq) (*GetLifestyleDataByIdRes, error)
	UpdateLifestyleData(context.Context, *UpdateLifestyleDataReq) (*Empty, error)
	DeleteLifestyleData(context.Context, *DeleteLifestyleDataReq) (*Empty, error)
	// Wearable Data
	AddWearableData(context.Context, *AddWearableDataReq) (*AddWearableDataRes, error)
	GetWearableData(context.Context, *GetWearableDataReq) (*GetWearableDataRes, error)
	GetWearableDataById(context.Context, *GetWearableDataByIdReq) (*GetWearableDataByIdRes, error)
	UpdateWearableData(context.Context, *UpdateWearableDataReq) (*Empty, error)
	DeleteWearableData(context.Context, *DeleteWearableDataReq) (*Empty, error)
	// Health recommendations
	GenerateHealthRecommendations(context.Context, *GenerateHealthRecommendationsReq) (*GenerateHealthRecommendationsRes, error)
	GetHealthRecommendationsById(context.Context, *GetHealthRecommendationsByIdReq) (*GetHealthRecommendationsByIdRes, error)
	// Health monitoring
	GetRealtimeHealthMonitoring(context.Context, *GetRealtimeHealthMonitoringReq) (*GetRealtimeHealthMonitoringRes, error)
	GetDailyHealthSummary(context.Context, *GetDailyHealthSummaryReq) (*GetDailyHealthSummaryRes, error)
	GetWeeklyHealthSummary(context.Context, *GetWeeklyHealthSummaryReq) (*GetWeeklyHealthSummaryRes, error)
	mustEmbedUnimplementedAnalyticsServiceServer()
}

// UnimplementedAnalyticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnalyticsServiceServer struct{}

func (UnimplementedAnalyticsServiceServer) AddMedicalRecord(context.Context, *AddMedicalRecordReq) (*AddMedicalRecordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMedicalRecord not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetMedicalRecord(context.Context, *GetMedicalRecordsReq) (*GetMedicalRecordsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicalRecord not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetMedicalRecordsById(context.Context, *GetMedicalRecordsByIdReq) (*GetMedicalRecordsByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicalRecordsById not implemented")
}
func (UnimplementedAnalyticsServiceServer) UpdateMedicalRecord(context.Context, *UpdateMedicalRecordReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicalRecord not implemented")
}
func (UnimplementedAnalyticsServiceServer) DeleteMedicalRecord(context.Context, *DeleteMedicalRecordReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedicalRecord not implemented")
}
func (UnimplementedAnalyticsServiceServer) ListMedicalRecords(context.Context, *ListMedicalRecordsReq) (*ListMedicalRecordsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicalRecords not implemented")
}
func (UnimplementedAnalyticsServiceServer) AddLifestyleData(context.Context, *AddLifestyleDataReq) (*AddLifestyleDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLifestyleData not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetLifestyleData(context.Context, *GetLifestyleDataReq) (*GetLifestyleDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLifestyleData not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetLifestyleDataById(context.Context, *GetLifestyleDataByIdReq) (*GetLifestyleDataByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLifestyleDataById not implemented")
}
func (UnimplementedAnalyticsServiceServer) UpdateLifestyleData(context.Context, *UpdateLifestyleDataReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLifestyleData not implemented")
}
func (UnimplementedAnalyticsServiceServer) DeleteLifestyleData(context.Context, *DeleteLifestyleDataReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLifestyleData not implemented")
}
func (UnimplementedAnalyticsServiceServer) AddWearableData(context.Context, *AddWearableDataReq) (*AddWearableDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWearableData not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetWearableData(context.Context, *GetWearableDataReq) (*GetWearableDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWearableData not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetWearableDataById(context.Context, *GetWearableDataByIdReq) (*GetWearableDataByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWearableDataById not implemented")
}
func (UnimplementedAnalyticsServiceServer) UpdateWearableData(context.Context, *UpdateWearableDataReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWearableData not implemented")
}
func (UnimplementedAnalyticsServiceServer) DeleteWearableData(context.Context, *DeleteWearableDataReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWearableData not implemented")
}
func (UnimplementedAnalyticsServiceServer) GenerateHealthRecommendations(context.Context, *GenerateHealthRecommendationsReq) (*GenerateHealthRecommendationsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateHealthRecommendations not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetHealthRecommendationsById(context.Context, *GetHealthRecommendationsByIdReq) (*GetHealthRecommendationsByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthRecommendationsById not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetRealtimeHealthMonitoring(context.Context, *GetRealtimeHealthMonitoringReq) (*GetRealtimeHealthMonitoringRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealtimeHealthMonitoring not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetDailyHealthSummary(context.Context, *GetDailyHealthSummaryReq) (*GetDailyHealthSummaryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyHealthSummary not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetWeeklyHealthSummary(context.Context, *GetWeeklyHealthSummaryReq) (*GetWeeklyHealthSummaryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeeklyHealthSummary not implemented")
}
func (UnimplementedAnalyticsServiceServer) mustEmbedUnimplementedAnalyticsServiceServer() {}
func (UnimplementedAnalyticsServiceServer) testEmbeddedByValue()                          {}

// UnsafeAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServiceServer will
// result in compilation errors.
type UnsafeAnalyticsServiceServer interface {
	mustEmbedUnimplementedAnalyticsServiceServer()
}

func RegisterAnalyticsServiceServer(s grpc.ServiceRegistrar, srv AnalyticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnalyticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnalyticsService_ServiceDesc, srv)
}

func _AnalyticsService_AddMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMedicalRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).AddMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_AddMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).AddMedicalRecord(ctx, req.(*AddMedicalRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicalRecordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetMedicalRecord(ctx, req.(*GetMedicalRecordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetMedicalRecordsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicalRecordsByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetMedicalRecordsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetMedicalRecordsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetMedicalRecordsById(ctx, req.(*GetMedicalRecordsByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_UpdateMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedicalRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).UpdateMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_UpdateMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).UpdateMedicalRecord(ctx, req.(*UpdateMedicalRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_DeleteMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMedicalRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).DeleteMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_DeleteMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).DeleteMedicalRecord(ctx, req.(*DeleteMedicalRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_ListMedicalRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMedicalRecordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).ListMedicalRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_ListMedicalRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).ListMedicalRecords(ctx, req.(*ListMedicalRecordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_AddLifestyleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLifestyleDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).AddLifestyleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_AddLifestyleData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).AddLifestyleData(ctx, req.(*AddLifestyleDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetLifestyleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLifestyleDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetLifestyleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetLifestyleData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetLifestyleData(ctx, req.(*GetLifestyleDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetLifestyleDataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLifestyleDataByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetLifestyleDataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetLifestyleDataById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetLifestyleDataById(ctx, req.(*GetLifestyleDataByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_UpdateLifestyleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLifestyleDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).UpdateLifestyleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_UpdateLifestyleData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).UpdateLifestyleData(ctx, req.(*UpdateLifestyleDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_DeleteLifestyleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLifestyleDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).DeleteLifestyleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_DeleteLifestyleData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).DeleteLifestyleData(ctx, req.(*DeleteLifestyleDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_AddWearableData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWearableDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).AddWearableData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_AddWearableData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).AddWearableData(ctx, req.(*AddWearableDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetWearableData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWearableDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetWearableData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetWearableData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetWearableData(ctx, req.(*GetWearableDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetWearableDataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWearableDataByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetWearableDataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetWearableDataById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetWearableDataById(ctx, req.(*GetWearableDataByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_UpdateWearableData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWearableDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).UpdateWearableData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_UpdateWearableData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).UpdateWearableData(ctx, req.(*UpdateWearableDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_DeleteWearableData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWearableDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).DeleteWearableData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_DeleteWearableData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).DeleteWearableData(ctx, req.(*DeleteWearableDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GenerateHealthRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateHealthRecommendationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GenerateHealthRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GenerateHealthRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GenerateHealthRecommendations(ctx, req.(*GenerateHealthRecommendationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetHealthRecommendationsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHealthRecommendationsByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetHealthRecommendationsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetHealthRecommendationsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetHealthRecommendationsById(ctx, req.(*GetHealthRecommendationsByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetRealtimeHealthMonitoring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealtimeHealthMonitoringReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetRealtimeHealthMonitoring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetRealtimeHealthMonitoring_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetRealtimeHealthMonitoring(ctx, req.(*GetRealtimeHealthMonitoringReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetDailyHealthSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyHealthSummaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetDailyHealthSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetDailyHealthSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetDailyHealthSummary(ctx, req.(*GetDailyHealthSummaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetWeeklyHealthSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeeklyHealthSummaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetWeeklyHealthSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetWeeklyHealthSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetWeeklyHealthSummary(ctx, req.(*GetWeeklyHealthSummaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsService_ServiceDesc is the grpc.ServiceDesc for AnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "analytics.AnalyticsService",
	HandlerType: (*AnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMedicalRecord",
			Handler:    _AnalyticsService_AddMedicalRecord_Handler,
		},
		{
			MethodName: "GetMedicalRecord",
			Handler:    _AnalyticsService_GetMedicalRecord_Handler,
		},
		{
			MethodName: "GetMedicalRecordsById",
			Handler:    _AnalyticsService_GetMedicalRecordsById_Handler,
		},
		{
			MethodName: "UpdateMedicalRecord",
			Handler:    _AnalyticsService_UpdateMedicalRecord_Handler,
		},
		{
			MethodName: "DeleteMedicalRecord",
			Handler:    _AnalyticsService_DeleteMedicalRecord_Handler,
		},
		{
			MethodName: "ListMedicalRecords",
			Handler:    _AnalyticsService_ListMedicalRecords_Handler,
		},
		{
			MethodName: "AddLifestyleData",
			Handler:    _AnalyticsService_AddLifestyleData_Handler,
		},
		{
			MethodName: "GetLifestyleData",
			Handler:    _AnalyticsService_GetLifestyleData_Handler,
		},
		{
			MethodName: "GetLifestyleDataById",
			Handler:    _AnalyticsService_GetLifestyleDataById_Handler,
		},
		{
			MethodName: "UpdateLifestyleData",
			Handler:    _AnalyticsService_UpdateLifestyleData_Handler,
		},
		{
			MethodName: "DeleteLifestyleData",
			Handler:    _AnalyticsService_DeleteLifestyleData_Handler,
		},
		{
			MethodName: "AddWearableData",
			Handler:    _AnalyticsService_AddWearableData_Handler,
		},
		{
			MethodName: "GetWearableData",
			Handler:    _AnalyticsService_GetWearableData_Handler,
		},
		{
			MethodName: "GetWearableDataById",
			Handler:    _AnalyticsService_GetWearableDataById_Handler,
		},
		{
			MethodName: "UpdateWearableData",
			Handler:    _AnalyticsService_UpdateWearableData_Handler,
		},
		{
			MethodName: "DeleteWearableData",
			Handler:    _AnalyticsService_DeleteWearableData_Handler,
		},
		{
			MethodName: "GenerateHealthRecommendations",
			Handler:    _AnalyticsService_GenerateHealthRecommendations_Handler,
		},
		{
			MethodName: "GetHealthRecommendationsById",
			Handler:    _AnalyticsService_GetHealthRecommendationsById_Handler,
		},
		{
			MethodName: "GetRealtimeHealthMonitoring",
			Handler:    _AnalyticsService_GetRealtimeHealthMonitoring_Handler,
		},
		{
			MethodName: "GetDailyHealthSummary",
			Handler:    _AnalyticsService_GetDailyHealthSummary_Handler,
		},
		{
			MethodName: "GetWeeklyHealthSummary",
			Handler:    _AnalyticsService_GetWeeklyHealthSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analytics.proto",
}
